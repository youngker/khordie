define AVAILABLE_NUM:= 50
define NUM_OF_CHORD := 198
define NUM_OF_KEY := 7
define NUM_OF_NOTE := 12
define NUM_OF_ALL_KEY := 128

define NOTE_INDEX := 10
define POS_Y := 4
define NUM_OF_KEYS := 15
define STAFF_X := 20
define STAFF_Y := 115
define STEP := 7
define NA := 0
define PNOTE_POS_X := 60
define PNOTE_POS_Y := 430

define C4 := STAFF_Y + 81
define B3 := STAFF_Y + 92
define NOTE_POS_X := 200
define NOTE_HALF_X := 12
define NOTE_WHOLE_X := 20
define LINE_POS_X := NOTE_POS_X - 10
define SIG_POS_X := 18

define NC := " n.c."
define KEYTIME := 100000

on init
    //activate_logger("C:/Users/youngker/log.nka")

    declare empty_notes[AVAILABLE_NUM] := (0xFF)
    declare empty_keys[NUM_OF_KEY] := (0xFF)
    declare notes[AVAILABLE_NUM] := (0xFF)
    declare sustain_notes[NUM_OF_ALL_KEY] := (0xFF)
    declare pnum := 0
    declare is_sustain := 0
    declare key
    declare i := 0
    declare j := 0
    declare k := 0
    declare l := 0
    declare m := 0
    declare n := 0

    message("")
    make_perfview
    set_script_title("Khordie")
    set_ui_height_px(450)
    set_ui_color(9FFFFFFh)

    declare ui_label note[AVAILABLE_NUM] (1,1)
    for i := 0 to AVAILABLE_NUM - 1
        note[i]->picture := "note"
        note[i]->text := ""
        note[i]->hide := HIDE_PART_BG
    end for

    declare ui_label sharp[AVAILABLE_NUM] (1,1)
    for i := 0 to AVAILABLE_NUM -1
        sharp[i]->picture := "sharp"
        sharp[i]->text := ""
        sharp[i]->hide := HIDE_PART_BG
    end for
    declare ui_label flat[AVAILABLE_NUM] (1,1)
    for i := 0 to AVAILABLE_NUM - 1
        flat[i]->picture := "flat"
        flat[i]->text := ""
        flat[i]->hide := HIDE_PART_BG
    end for
    declare ui_label natural[AVAILABLE_NUM] (1,1)
    for i := 0 to AVAILABLE_NUM - 1
        natural[i]->picture := "natural"
        natural[i]->text := ""
        natural[i]->hide := HIDE_PART_BG
    end for

    declare key_pos[2, NUM_OF_KEYS-1, 2] := (...
        STAFF_X+50,STAFF_Y+23, STAFF_X+57,STAFF_Y+2,  STAFF_X+64,STAFF_Y+30, STAFF_X+71,STAFF_Y+9,  STAFF_X+78,STAFF_Y+37, STAFF_X+85,STAFF_Y+16, STAFF_X+92,STAFF_Y+44,...
        STAFF_X+50,STAFF_Y+125,STAFF_X+57,STAFF_Y+104,STAFF_X+64,STAFF_Y+132,STAFF_X+71,STAFF_Y+111,STAFF_X+78,STAFF_Y+139,STAFF_X+85,STAFF_Y+118,STAFF_X+92,STAFF_Y+146,...
        STAFF_X+50,STAFF_Y+1,  STAFF_X+57,STAFF_Y+22, STAFF_X+64,STAFF_Y-6,  STAFF_X+71,STAFF_Y+15, STAFF_X+78,STAFF_Y+37, STAFF_X+85,STAFF_Y+8,  STAFF_X+92,STAFF_Y+29,...
        STAFF_X+50,STAFF_Y+103,STAFF_X+57,STAFF_Y+124,STAFF_X+64,STAFF_Y+96, STAFF_X+71,STAFF_Y+117,STAFF_X+78,STAFF_Y+139,STAFF_X+85,STAFF_Y+110,STAFF_X+92,STAFF_Y+131)

    declare ui_label flatkey[NUM_OF_KEYS-1] (1,1)
    for i := 0 to NUM_OF_KEYS - 2
        flatkey[i]->picture := "flat"
        flatkey[i]->text := ""
        flatkey[i]->hide := HIDE_PART_BG
        flatkey[i]->pos_x := key_pos[0,i,0]
        flatkey[i]->pos_y := key_pos[0,i,1]
    end for
    declare ui_label sharpkey[NUM_OF_KEYS-1] (1,1)
    for i := 0 to NUM_OF_KEYS - 2
        sharpkey[i]->picture := "sharp"
        sharpkey[i]->text := ""
        sharpkey[i]->hide := HIDE_PART_BG
        sharpkey[i]->pos_x := key_pos[1,i,0]
        sharpkey[i]->pos_y := key_pos[1,i,1]
    end for

    declare ui_label bnotes[NUM_OF_ALL_KEY] (1,1)
    for i := 0 to NUM_OF_ALL_KEY - 1
        bnotes[i]->font_type := get_font_id("ssfont")
        bnotes[i]->text := ""
        bnotes[i]->hide := HIDE_PART_BG
    end for

    declare line_pos_y[16] := (...
        C4-28*STEP+5,C4-26*STEP+5,C4-24*STEP+5,C4-22*STEP+5,C4-20*STEP+5,C4-18*STEP+5,C4-16*STEP+5,C4-14*STEP+5,C4-12*STEP+5,...
        C4+5,...
        B3+11*STEP+5,B3+13*STEP+5,B3+15*STEP+5,B3+17*STEP+5,B3+19*STEP+5,B3+21*STEP+5)

    declare ui_label line[16] (1,1)
    for i := 0 to 16 - 1
        line[i]->picture := "line"
        line[i]->text := ""
        line[i]->hide := HIDE_PART_BG
        line[i]->pos_x := LINE_POS_X
        line[i]->pos_y := line_pos_y[i]
    end for

    declare ui_label key_name(1,1)
    set_control_par(get_ui_id(key_name),$CONTROL_PAR_FONT_TYPE,get_font_id("sfont"))
    set_control_par(get_ui_id(key_name),$CONTROL_PAR_WIDTH, 110)
    set_control_par(get_ui_id(key_name),$CONTROL_PAR_HEIGHT, 25)
    set_text(key_name, "Key: No Key")
    hide_part(key_name, $HIDE_PART_BG)
    move_control_px(key_name, 20, 84)

    declare ui_label staff(1,1)
    set_control_par_str(get_ui_id(staff),$CONTROL_PAR_PICTURE, "staff")
    set_text(staff, "")
    move_control_px(staff, STAFF_X, STAFF_Y)

    declare ui_label main (1, 1)
    set_control_par(get_ui_id(main),$CONTROL_PAR_FONT_TYPE,get_font_id("font"))
    set_control_par(get_ui_id(main),$CONTROL_PAR_WIDTH, 300)
    set_control_par(get_ui_id(main),$CONTROL_PAR_HEIGHT, 50)
    set_text(main, "")
    hide_part(main, $HIDE_PART_BG)
    move_control_px(main, 290, 109)

    declare ui_label sub (1, 2)
    set_control_par(get_ui_id(sub),$CONTROL_PAR_FONT_TYPE,get_font_id("sfont"))
    set_control_par(get_ui_id(sub),$CONTROL_PAR_WIDTH, 300)
    set_control_par(get_ui_id(sub),$CONTROL_PAR_HEIGHT, 200)
    set_text(sub, "")
    hide_part(sub, $HIDE_PART_BG)
    move_control_px(sub, 300, 159)

    declare ui_label sustain (1, 1)
    set_control_par(get_ui_id(sustain),$CONTROL_PAR_FONT_TYPE,get_font_id("sfont"))
    set_control_par(get_ui_id(sustain),$CONTROL_PAR_WIDTH, 70)
    set_control_par(get_ui_id(sustain),$CONTROL_PAR_HEIGHT, 30)
    set_text(sustain,"")
    hide_part(sustain,$HIDE_PART_BG)
    move_control_px(sustain, 0, 350)

    declare ui_knob knob (0, 14, 1)
    hide_part(knob,HIDE_PART_VALUE .or. HIDE_PART_TITLE .or. HIDE_PART_BG)
    move_control_px(knob, 20, 40)

    declare !keys[] := ("C maj/a min",   "F maj/d min",   "Bb maj/g min",  "Eb maj/c min",  ...
                        "Ab maj/f min",  "Db maj/bb min", "Gb maj/eb min", "Cb maj/g# min", ...
                        "C# maj/bb min", "F# maj/d# min", "B maj/g# min",  "E maj/c# min",  ...
                        "A maj/f# min",  "D maj/b min",   "G maj/e min")

    declare key_to_index[] := (0, 5, 10, 3, 8, 1, 6, 11, 1, 6, 11, 4, 9, 2, 7)
    declare major[] := (1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1)

    declare !ckeynotes [] := ("C","C#","D","Eb","E","F","F#","G","Ab","A","Bb","B",...
                              "C","Db","D","Eb","E","F","Gb","G","Ab","A","Bb","B",...
                              "C","C#","D","D#","E","F","F#","G","G#","A","A#","B")

    declare keyoffset[] := (0,1,0,1,0,0,1,0,1,0,1,0,...
                            0,1,0,1,0,0,1,0,1,0,1,1,...
                            0,1,0,1,1,0,1,0,1,0,1,1,...
                            0,1,0,1,1,0,1,0,1,1,1,1,...
                            0,1,1,1,1,0,1,0,1,1,1,1,...
                            0,1,1,1,1,0,1,1,1,1,1,1,...
                            1,1,1,1,1,0,1,1,1,1,1,1,...
                            1,1,1,1,1,1,1,1,1,1,1,1,...
                            1,1,1,1,1,1,1,1,1,1,1,1,...
                            1,1,1,1,1,1,1,1,1,1,1,0,...
                            1,1,1,1,0,1,1,1,1,1,1,0,...
                            1,1,1,1,0,1,1,1,1,0,1,0,...
                            1,1,0,1,0,1,1,1,1,0,1,0,...
                            1,1,0,1,0,1,1,0,1,0,1,0,...
                            0,1,0,1,0,1,1,0,1,0,1,0)

    declare !keynotes[] := ("C","C#","D","Eb","E","F","F#","G","Ab","A","Bb","B",...
                            "C","Db","D","Eb","E","F","Gb","G","Ab","A","Bb","BN",...
                            "C","Db","D","Eb","EN","F","Gb","G","Ab","A","Bb","BN",...
                            "C","Db","D","Eb","EN","F","Gb","G","Ab","AN","Bb","BN",...
                            "C","Db","DN","Eb","EN","F","Gb","G","Ab","AN","Bb","BN",...
                            "C","Db","DN","Eb","EN","F","Gb","GN","Ab","AN","Bb","BN",...
                            "CN","Db","DN","Eb","EN","F","Gb","GN","Ab","AN","Bb","Cb",...
                            "CN","Db","DN","Eb","Fb","FN","Gb","GN","Ab","AN","Bb","Cb",...
                            "B#","C#","DN","D#","EN","E#","F#","GN","G#","AN","A#","BN",...
                            "CN","C#","DN","D#","EN","E#","F#","GN","G#","AN","A#","B",...
                            "CN","C#","DN","D#","E","FN","F#","GN","G#","AN","A#","B",...
                            "CN","C#","DN","D#","E","FN","F#","GN","G#","A","A#","B",...
                            "CN","C#","D","D#","E","FN","F#","GN","G#","A","A#","B",...
                            "CN","C#","D","D#","E","FN","F#","G","G#","A","A#","B",...
                            "C","C#","D","D#","E","FN","F#","G","G#","A","A#","B")

    declare !chord_names[NUM_OF_CHORD]
    !chord_names[0] := "Octave"
    !chord_names[1] := "minor 2nd"
    !chord_names[2] := "Major 2nd"
    !chord_names[3] := "minor 3rd"
    !chord_names[4] := "Major 3rd"
    !chord_names[5] := "Perfect 4th"
    !chord_names[6] := "Tritone"
    !chord_names[7] := "Perfect 5th"
    !chord_names[8] := "minor 6th"
    !chord_names[9] := "Major 6th"
    !chord_names[10] := "minor 7th"
    !chord_names[11] := "Major 7th"
    !chord_names[12] := "Maj(add2)"
    !chord_names[13] := "Sus2"
    !chord_names[14] := "min7(no5)"
    !chord_names[15] := "dim"
    !chord_names[16] := "min"
    !chord_names[17] := "7(no5)"
    !chord_names[18] := "Maj7(no5)"
    !chord_names[19] := "Maj(b5)"
    !chord_names[20] := ""
    !chord_names[21] := "Aug"
    !chord_names[22] := "7sus4(no5)"
    !chord_names[23] := "Sus4"
    !chord_names[24] := "7(no3)"
    !chord_names[25] := "Maj7(no3)"
    !chord_names[26] := "7b9(no5)"
    !chord_names[27] := "Maj(add b9)"
    !chord_names[28] := "(#9)"
    !chord_names[29] := "7sus4(b9)"
    !chord_names[30] := "min9"
    !chord_names[31] := "min(add2)"
    !chord_names[32] := "Maj(add b5)"
    !chord_names[33] := "min6/9"
    !chord_names[34] := "7(9)"
    !chord_names[35] := "Maj9 no 5th"
    !chord_names[36] := "Maj(add2)"
    !chord_names[37] := "6/9"
    !chord_names[38] := "9sus4"
    !chord_names[39] := "min6"
    !chord_names[40] := "Maj6"
    !chord_names[41] := "7Sus2"
    !chord_names[42] := "Maj7 Sus2"
    !chord_names[43] := "6/9(no3)"
    !chord_names[44] := "7#9(no5)"
    !chord_names[45] := "(add#9)"
    !chord_names[46] := "min7(4)"
    !chord_names[47] := "min(add4/11)"
    !chord_names[48] := "Maj6"
    !chord_names[49] := "min7b5"
    !chord_names[50] := "dim(Maj7)"
    !chord_names[51] := "dim7"
    !chord_names[52] := "min7"
    !chord_names[53] := "minMaj7"
    !chord_names[54] := "min6"
    !chord_names[55] := "dim(Maj7#5)"
    !chord_names[56] := "dim(Maj7)"
    !chord_names[57] := "min7(13)"
    !chord_names[58] := "minMaj7(13)"
    !chord_names[59] := "7(add4)"
    !chord_names[60] := "7b5"
    !chord_names[61] := "Maj7b5"
    !chord_names[62] := "Maj(add b5)"
    !chord_names[63] := "min6"
    !chord_names[64] := "7"
    !chord_names[65] := "Maj7"
    !chord_names[66] := "Maj6"
    !chord_names[67] := "7#5"
    !chord_names[68] := "Maj7#5"
    !chord_names[69] := "7(13 no5)"
    !chord_names[70] := "Maj7(13)"
    !chord_names[71] := "dim(Maj7)"
    !chord_names[72] := "7Sus4"
    !chord_names[73] := "Maj7 Sus4"
    !chord_names[74] := "min(add4/11)"
    !chord_names[75] := "(add#9)"
    !chord_names[76] := "7sus4(13)"
    !chord_names[77] := "7(#9#9)"
    !chord_names[78] := "7sus4(b9b3)"
    !chord_names[79] := "minb9"
    !chord_names[80] := "7(b9b5)"
    !chord_names[81] := "7(b9)"
    !chord_names[82] := "7(b9#5)"
    !chord_names[83] := "13(b9)"
    !chord_names[84] := "7sus4(b9)"
    !chord_names[85] := "7sus4(b9b13)"
    !chord_names[86] := "13sus(b9)"
    !chord_names[87] := "min9(11)"
    !chord_names[88] := "minMaj9(11)"
    !chord_names[89] := "min(add2/4)"
    !chord_names[90] := "min6/9/11"
    !chord_names[91] := "min9(b5)"
    !chord_names[92] := "dimMaj7(9)"
    !chord_names[93] := "dim7(9)"
    !chord_names[94] := "min9"
    !chord_names[95] := "min(Maj9)"
    !chord_names[96] := "minMaj7(9)"
    !chord_names[97] := "min6/9"
    !chord_names[98] := "dimMaj9(#5)"
    !chord_names[99] := "minMaj9(13)"
    !chord_names[100] := "9sus4(add3)"
    !chord_names[101] := "9(#11)"
    !chord_names[102] := "Maj9(b5)"
    !chord_names[103] := "Maj7(add2,#11)"
    !chord_names[104] := "6/9(#11)"
    !chord_names[105] := "9"
    !chord_names[106] := "Maj9"
    !chord_names[107] := "6/9"
    !chord_names[108] := "9(#5)"
    !chord_names[109] := "Maj9(#5)"
    !chord_names[110] := "9(13)"
    !chord_names[111] := "Maj9(13)"
    !chord_names[112] := "min11(b5)"
    !chord_names[113] := "9sus4"
    !chord_names[114] := "Maj9sus4"
    !chord_names[115] := "9sus4(b13)"
    !chord_names[116] := "13sus"
    !chord_names[117] := "7(#9b5)"
    !chord_names[118] := "7(#9)"
    !chord_names[119] := "7(#9#5)"
    !chord_names[120] := "13(#9)"
    !chord_names[121] := "min7b5(11)"
    !chord_names[122] := "dimMaj7(11)"
    !chord_names[123] := "dim7(11)"
    !chord_names[124] := "min7(11)"
    !chord_names[125] := "min7(#11)"
    !chord_names[126] := "min7b5(b13)"
    !chord_names[127] := "dim7(add #5)"
    !chord_names[128] := "dim7(add M7)"
    !chord_names[129] := "min7(13)"
    !chord_names[130] := "minMaj7(13)"
    !chord_names[131] := "7(add11)"
    !chord_names[132] := "7(#11)"
    !chord_names[133] := "Maj7(#11)"
    !chord_names[134] := "6(#11)"
    !chord_names[135] := "Maj7(b5#5)"
    !chord_names[136] := "13#11"
    !chord_names[137] := "Maj7(add #5)"
    !chord_names[138] := "13(no 9)"
    !chord_names[139] := "Maj13(no9)"
    !chord_names[140] := "7(b9#9b5)"
    !chord_names[141] := "7(b9#9)"
    !chord_names[142] := "7(b9#9#5)"
    !chord_names[143] := "7sus(b9#9b13)"
    !chord_names[144] := "min7b5(b9b13)"
    !chord_names[145] := "7(b9#11)"
    !chord_names[146] := "7(b9b5b13)"
    !chord_names[147] := "13(b9#11)"
    !chord_names[148] := "7b9b13(add5)"
    !chord_names[149] := "13(b9)"
    !chord_names[150] := "13sus(b9)"
    !chord_names[151] := "min7b5(9,11)"
    !chord_names[152] := "dimMaj7(9/11)"
    !chord_names[153] := "dim7(9/11)"
    !chord_names[154] := "min9(11)"
    !chord_names[155] := "min9/11(Maj7)"
    !chord_names[156] := "min6/9(11)"
    !chord_names[157] := "min9(11,13)"
    !chord_names[158] := "minMaj11(13)"
    !chord_names[159] := "dimM9(#5)"
    !chord_names[160] := "min9(13)"
    !chord_names[161] := "min(Maj9/13)"
    !chord_names[162] := "13sus4(add3)"
    !chord_names[163] := "9(#11)"
    !chord_names[164] := "Maj9(#11)"
    !chord_names[165] := "6/9(#11)"
    !chord_names[166] := "9(#5b5)"
    !chord_names[167] := "Maj9(b5#5)"
    !chord_names[168] := "9(13)#11"
    !chord_names[169] := "Maj13(#11)"
    !chord_names[170] := "9(13)"
    !chord_names[171] := "Maj9(13)"
    !chord_names[172] := "13sus"
    !chord_names[173] := "7(#9#11)"
    !chord_names[174] := "7(#9#11b13)"
    !chord_names[175] := "13(#9#11)"
    !chord_names[176] := "7#9b13(add5)"
    !chord_names[177] := "13(#9)"
    !chord_names[178] := "dim7(11b13)"
    !chord_names[179] := "13sus4(add3)"
    !chord_names[180] := "7(b9#9#11)"
    !chord_names[181] := "7alt"
    !chord_names[182] := "13(b9#9#11)"
    !chord_names[183] := "7(b9#9b13)"
    !chord_names[184] := "13(b9#9)"
    !chord_names[185] := "13(b9#9)"
    !chord_names[186] := "7sus(b9#9b13)"
    !chord_names[187] := "7b9#11b13"
    !chord_names[188] := "13(b9#11)"
    !chord_names[189] := "dim(add M7,9,11)"
    !chord_names[190] := "Maj13(9,11)"
    !chord_names[191] := "Maj13(9,#11)"
    !chord_names[192] := "13sus4(add3)"
    !chord_names[193] := "Maj13(add4)"
    !chord_names[194] := "9(13)#11"
    !chord_names[195] := "Maj13(#11)"
    !chord_names[196] := "Maj13(b5#5)"
    !chord_names[197] := "13(#9#11)"

    declare base_chord[NUM_OF_CHORD*NUM_OF_KEY] := (...
        0,255,255,255,255,255,255,... { 0 }
        0,1,255,255,255,255,255,... { 1 }
        0,2,255,255,255,255,255,... { 2 }
        0,3,255,255,255,255,255,... { 3 }
        0,4,255,255,255,255,255,... { 4 }
        0,5,255,255,255,255,255,... { 5 }
        0,6,255,255,255,255,255,... { 6 }
        0,7,255,255,255,255,255,... { 7 }
        0,8,255,255,255,255,255,... { 8 }
        0,9,255,255,255,255,255,... { 9 }
        0,10,255,255,255,255,255,... { 10 }
        0,11,255,255,255,255,255,... { 11 }
        0,2,4,255,255,255,255,... { 12 }
        0,2,7,255,255,255,255,... { 13 }
        0,3,10,255,255,255,255,... { 14 }
        0,3,6,255,255,255,255,... { 15 }
        0,3,7,255,255,255,255,... { 16 }
        0,4,10,255,255,255,255,... { 17 }
        0,4,11,255,255,255,255,... { 18 }
        0,4,6,255,255,255,255,... { 19 }
        0,4,7,255,255,255,255,... { 20 }
        0,4,8,255,255,255,255,... { 21 }
        0,5,10,255,255,255,255,... { 22 }
        0,5,7,255,255,255,255,... { 23 }
        0,7,10,255,255,255,255,... { 24 }
        0,7,11,255,255,255,255,... { 25 }
        0,1,4,10,255,255,255,... { 26 }
        0,1,4,7,255,255,255,... { 27 }
        0,1,4,9,255,255,255,... { 28 }
        0,1,5,10,255,255,255,... { 29 }
        0,2,3,10,255,255,255,... { 30 }
        0,2,3,7,255,255,255,... { 31 }
        0,2,3,8,255,255,255,... { 32 }
        0,2,3,9,255,255,255,... { 33 }
        0,2,4,10,255,255,255,... { 34 }
        0,2,4,11,255,255,255,... { 35 }
        0,2,4,7,255,255,255,... { 36 }
        0,2,4,9,255,255,255,... { 37 }
        0,2,5,10,255,255,255,... { 38 }
        0,2,5,8,255,255,255,... { 39 }
        0,2,5,9,255,255,255,... { 40 }
        0,2,7,10,255,255,255,... { 41 }
        0,2,7,11,255,255,255,... { 42 }
        0,2,7,9,255,255,255,... { 43 }
        0,3,4,10,255,255,255,... { 44 }
        0,3,4,7,255,255,255,... { 45 }
        0,3,5,10,255,255,255,... { 46 }
        0,3,5,7,255,255,255,... { 47 }
        0,3,5,8,255,255,255,... { 48 }
        0,3,6,10,255,255,255,... { 49 }
        0,3,6,11,255,255,255,... { 50 }
        0,3,6,9,255,255,255,... { 51 }
        0,3,7,10,255,255,255,... { 52 }
        0,3,7,11,255,255,255,... { 53 }
        0,3,7,9,255,255,255,... { 54 }
        0,3,8,11,255,255,255,... { 55 }
        0,3,8,9,255,255,255,... { 56 }
        0,3,9,10,255,255,255,... { 57 }
        0,3,9,11,255,255,255,... { 58 }
        0,4,5,10,255,255,255,... { 59 }
        0,4,6,10,255,255,255,... { 60 }
        0,4,6,11,255,255,255,... { 61 }
        0,4,6,7,255,255,255,... { 62 }
        0,4,6,9,255,255,255,... { 63 }
        0,4,7,10,255,255,255,... { 64 }
        0,4,7,11,255,255,255,... { 65 }
        0,4,7,9,255,255,255,... { 66 }
        0,4,8,10,255,255,255,... { 67 }
        0,4,8,11,255,255,255,... { 68 }
        0,4,9,10,255,255,255,... { 69 }
        0,4,9,11,255,255,255,... { 70 }
        0,5,6,9,255,255,255,... { 71 }
        0,5,7,10,255,255,255,... { 72 }
        0,5,7,11,255,255,255,... { 73 }
        0,5,8,10,255,255,255,... { 74 }
        0,5,8,9,255,255,255,... { 75 }
        0,5,9,10,255,255,255,... { 76 }
        0,1,3,4,10,255,255,... { 77 }
        0,1,3,5,10,255,255,... { 78 }
        0,1,3,7,10,255,255,... { 79 }
        0,1,4,6,10,255,255,... { 80 }
        0,1,4,7,10,255,255,... { 81 }
        0,1,4,8,10,255,255,... { 82 }
        0,1,4,9,10,255,255,... { 83 }
        0,1,5,7,10,255,255,... { 84 }
        0,1,5,8,10,255,255,... { 85 }
        0,1,5,9,10,255,255,... { 86 }
        0,2,3,5,10,255,255,... { 87 }
        0,2,3,5,11,255,255,... { 88 }
        0,2,3,5,7,255,255,... { 89 }
        0,2,3,5,9,255,255,... { 90 }
        0,2,3,6,10,255,255,... { 91 }
        0,2,3,6,11,255,255,... { 92 }
        0,2,3,6,9,255,255,... { 93 }
        0,2,3,7,10,255,255,... { 94 }
        0,2,3,7,11,255,255,... { 95 }
        0,2,3,7,11,255,255,... { 96 }
        0,2,3,7,9,255,255,... { 97 }
        0,2,3,8,11,255,255,... { 98 }
        0,2,3,9,11,255,255,... { 99 }
        0,2,4,5,10,255,255,... { 100 }
        0,2,4,6,10,255,255,... { 101 }
        0,2,4,6,11,255,255,... { 102 }
        0,2,4,6,7,255,255,... { 103 }
        0,2,4,6,9,255,255,... { 104 }
        0,2,4,7,10,255,255,... { 105 }
        0,2,4,7,11,255,255,... { 106 }
        0,2,4,7,9,255,255,... { 107 }
        0,2,4,8,10,255,255,... { 108 }
        0,2,4,8,11,255,255,... { 109 }
        0,2,4,9,10,255,255,... { 110 }
        0,2,4,9,11,255,255,... { 111 }
        0,2,5,6,10,255,255,... { 112 }
        0,2,5,7,10,255,255,... { 113 }
        0,2,5,7,11,255,255,... { 114 }
        0,2,5,8,10,255,255,... { 115 }
        0,2,5,9,10,255,255,... { 116 }
        0,3,4,6,10,255,255,... { 117 }
        0,3,4,7,10,255,255,... { 118 }
        0,3,4,8,10,255,255,... { 119 }
        0,3,4,9,10,255,255,... { 120 }
        0,3,5,6,10,255,255,... { 121 }
        0,3,5,6,11,255,255,... { 122 }
        0,3,5,6,9,255,255,... { 123 }
        0,3,5,7,10,255,255,... { 124 }
        0,3,6,7,10,255,255,... { 125 }
        0,3,6,8,10,255,255,... { 126 }
        0,3,6,8,9,255,255,... { 127 }
        0,3,6,9,11,255,255,... { 128 }
        0,3,7,9,10,255,255,... { 129 }
        0,3,7,9,11,255,255,... { 130 }
        0,4,5,7,10,255,255,... { 131 }
        0,4,6,7,10,255,255,... { 132 }
        0,4,6,7,11,255,255,... { 133 }
        0,4,6,7,9,255,255,... { 134 }
        0,4,6,8,11,255,255,... { 135 }
        0,4,6,9,10,255,255,... { 136 }
        0,4,7,8,11,255,255,... { 137 }
        0,4,7,9,10,255,255,... { 138 }
        0,4,7,9,11,255,255,... { 139 }
        0,1,3,4,6,10,255,... { 140 }
        0,1,3,4,7,10,255,... { 141 }
        0,1,3,4,8,10,255,... { 142 }
        0,1,3,5,8,10,255,... { 143 }
        0,1,3,6,8,10,255,... { 144 }
        0,1,4,6,7,10,255,... { 145 }
        0,1,4,6,8,10,255,... { 146 }
        0,1,4,6,9,10,255,... { 147 }
        0,1,4,7,8,10,255,... { 148 }
        0,1,4,7,9,10,255,... { 149 }
        0,1,5,7,9,10,255,... { 150 }
        0,2,3,5,6,10,255,... { 151 }
        0,2,3,5,6,11,255,... { 152 }
        0,2,3,5,6,9,255,... { 153 }
        0,2,3,5,7,10,255,... { 154 }
        0,2,3,5,7,11,255,... { 155 }
        0,2,3,5,7,9,255,... { 156 }
        0,2,3,5,9,10,255,... { 157 }
        0,2,3,5,9,11,255,... { 158 }
        0,2,3,6,8,11,255,... { 159 }
        0,2,3,7,9,10,255,... { 160 }
        0,2,3,7,9,11,255,... { 161 }
        0,2,4,5,9,10,255,... { 162 }
        0,2,4,6,7,10,255,... { 163 }
        0,2,4,6,7,11,255,... { 164 }
        0,2,4,6,7,9,255,... { 165 }
        0,2,4,6,8,10,255,... { 166 }
        0,2,4,6,8,11,255,... { 167 }
        0,2,4,6,9,10,255,... { 168 }
        0,2,4,6,9,11,255,... { 169 }
        0,2,4,7,9,10,255,... { 170 }
        0,2,4,7,9,11,255,... { 171 }
        0,2,5,7,9,10,255,... { 172 }
        0,3,4,6,7,10,255,... { 173 }
        0,3,4,6,8,10,255,... { 174 }
        0,3,4,6,9,10,255,... { 175 }
        0,3,4,7,8,10,255,... { 176 }
        0,3,4,7,9,10,255,... { 177 }
        0,3,5,6,8,9,255,... { 178 }
        0,4,5,7,9,10,255,... { 179 }
        0,1,3,4,6,7,10,... { 180 }
        0,1,3,4,6,8,10,... { 181 }
        0,1,3,4,6,9,10,... { 182 }
        0,1,3,4,7,8,10,... { 183 }
        0,1,3,4,7,9,10,... { 184 }
        0,1,3,4,9,10,255,... { 185 }
        0,1,3,5,7,8,10,... { 186 }
        0,1,4,6,7,8,10,... { 187 }
        0,1,4,6,7,9,10,... { 188 }
        0,2,3,5,6,9,11,... { 189 }
        0,2,3,5,7,9,10,... { 190 }
        0,2,3,6,7,9,10,... { 191 }
        0,2,4,5,7,9,10,... { 192 }
        0,2,4,5,7,9,11,... { 193 }
        0,2,4,6,7,9,10,... { 194 }
        0,2,4,6,7,9,11,... { 195 }
        0,2,4,6,8,9,11,... { 196 }
        0,3,4,6,7,9,10) { 197 }

    // "C","F","Bb","Eb","Ab","Db","Gb","Cb","C#","F#","B","E","A","D","G"
    // 0: N/A, 1:#, 2:b, 3:N, 4:Cb,Fb 5:E#,B#
    declare signature[NUM_OF_NOTE*NUM_OF_KEYS] := (...
        0, 0,0,0,0,0,3,3, 5,3,3,3,3,3,0,...
        1, 2,2,2,0,0,0,0, 0,0,0,0,0,0,1,...
        0, 0,0,0,3,3,3,3, 3,3,3,3,0,0,0,...
        2, 2,0,0,0,0,0,0, 0,0,0,0,1,1,1,...
        0, 0,3,3,3,3,3,4, 3,3,0,0,0,0,0,...
        0, 0,0,0,0,0,0,3, 5,5,3,3,3,3,3,...
        1, 2,2,2,2,0,0,0, 0,0,0,0,0,0,0,...
        0, 0,0,0,0,3,3,3, 3,3,3,3,3,0,0,...
        2, 2,2,0,0,0,0,0, 0,0,0,0,0,1,1,...
        0, 0,0,3,3,3,3,3, 3,3,3,0,0,0,0,...
        2, 0,0,0,0,0,0,0, 0,0,0,1,1,1,1,...
        0, 3,3,3,3,3,4,4, 3,0,0,0,0,0,0)

    declare note_pos[NUM_OF_ALL_KEY*NOTE_INDEX] := (...
        {0}  NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {1}  NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {2}  NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {3}  NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {4}  NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {5}  NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {6}  NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {7}  NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {8}  NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {9}  NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {10} NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {11} NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {12} NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {13} NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {14} NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {15} NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {16} NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {17} NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {18} NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {19} NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {20} NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {21} 1,1,1,1,B3+22*STEP,B3+22*STEP,B3+22*STEP,B3+22*STEP,PNOTE_POS_X-22,0,...
        {22} 2,1,2,1,B3+21*STEP,B3+22*STEP,B3+21*STEP,B3+22*STEP,PNOTE_POS_X-19,1,...
        {23} 2,2,2,2,B3+21*STEP,B3+21*STEP,B3+20*STEP,B3+21*STEP,PNOTE_POS_X-11,0,...
        {24} 1,1,1,2,B3+20*STEP,B3+20*STEP,B3+20*STEP,B3+21*STEP,PNOTE_POS_X,0,...                   //1
        {25} 2,1,2,1,B3+19*STEP,B3+20*STEP,B3+19*STEP,B3+20*STEP,PNOTE_POS_X+4,1,...
        {26} 2,2,2,2,B3+19*STEP,B3+19*STEP,B3+19*STEP,B3+19*STEP,PNOTE_POS_X+12,0,...                //2
        {27} 1,2,1,2,B3+18*STEP,B3+19*STEP,B3+18*STEP,B3+19*STEP,PNOTE_POS_X+15,1,...
        {28} 1,1,2,1,B3+18*STEP,B3+18*STEP,B3+17*STEP,B3+18*STEP,PNOTE_POS_X+23,0,...                //3
        {29} 2,2,2,2,B3+17*STEP,B3+17*STEP,B3+17*STEP,B3+18*STEP,PNOTE_POS_X+34,0,...                //4
        {30} 1,2,1,2,B3+16*STEP,B3+17*STEP,B3+16*STEP,B3+17*STEP,PNOTE_POS_X+37,1,...
        {31} 1,1,1,1,B3+16*STEP,B3+16*STEP,B3+16*STEP,B3+16*STEP,PNOTE_POS_X+45,0,...                //5
        {32} 2,1,2,1,B3+15*STEP,B3+16*STEP,B3+15*STEP,B3+16*STEP,PNOTE_POS_X+49,1,...
        {33} 2,2,2,2,B3+15*STEP,B3+15*STEP,B3+15*STEP,B3+15*STEP,PNOTE_POS_X+57,0,...                //6
        {34} 1,2,1,2,B3+14*STEP,B3+15*STEP,B3+14*STEP,B3+15*STEP,PNOTE_POS_X+60,1,...
        {35} 1,1,2,1,B3+14*STEP,B3+14*STEP,B3+13*STEP,B3+14*STEP,PNOTE_POS_X+68,0,...                //7
        {36} 2,2,2,2,B3+13*STEP,B3+13*STEP,B3+13*STEP,B3+14*STEP,PNOTE_POS_X+79,0,...                //8
        {37} 1,2,1,2,B3+12*STEP,B3+13*STEP,B3+12*STEP,B3+13*STEP,PNOTE_POS_X+83,1,...
        {38} 1,1,1,1,B3+12*STEP,B3+12*STEP,B3+12*STEP,B3+12*STEP,PNOTE_POS_X+91,0,...                //9
        {39} 2,1,2,1,B3+11*STEP,B3+12*STEP,B3+11*STEP,B3+12*STEP,PNOTE_POS_X+94,1,...
        {40} 2,2,2,2,B3+11*STEP,B3+11*STEP,B3+10*STEP,B3+11*STEP,PNOTE_POS_X+102,0,...               //10
        {41} 0,0,0,2,B3+10*STEP,B3+10*STEP,B3+10*STEP,B3+11*STEP,PNOTE_POS_X+114,0,...               //11
        {42} 0,0,0,0,B3+9*STEP,B3+10*STEP,B3+9*STEP,B3+10*STEP,PNOTE_POS_X+117,1,...
        {43} 0,0,0,0,B3+9*STEP,B3+9*STEP,B3+9*STEP,B3+9*STEP,PNOTE_POS_X+125,0,...                   //12
        {44} 0,0,0,0,B3+8*STEP,B3+9*STEP,B3+8*STEP,B3+9*STEP,PNOTE_POS_X+128,1,...
        {45} 0,0,0,0,B3+8*STEP,B3+8*STEP,B3+8*STEP,B3+8*STEP,PNOTE_POS_X+136,0,...                   //13
        {46} 0,0,0,0,B3+7*STEP,B3+8*STEP,B3+7*STEP,B3+8*STEP,PNOTE_POS_X+140,1,...
        {47} 0,0,0,0,B3+7*STEP,B3+7*STEP,B3+6*STEP,B3+7*STEP,PNOTE_POS_X+148,0,...                   //14
        {48} 0,0,0,0,B3+6*STEP,B3+6*STEP,B3+6*STEP,B3+7*STEP,PNOTE_POS_X+159,0,...                   //15
        {49} 0,0,0,0,B3+5*STEP,B3+6*STEP,B3+5*STEP,B3+6*STEP,PNOTE_POS_X+163,1,...
        {50} 0,0,0,0,B3+5*STEP,B3+5*STEP,B3+5*STEP,B3+5*STEP,PNOTE_POS_X+171,0,...                   //16
        {51} 0,0,0,0,B3+4*STEP,B3+5*STEP,B3+4*STEP,B3+5*STEP,PNOTE_POS_X+174,1,...
        {52} 0,0,0,0,B3+4*STEP,B3+4*STEP,B3+3*STEP,B3+4*STEP,PNOTE_POS_X+182,0,...                   //17
        {53} 0,0,0,0,B3+3*STEP,B3+3*STEP,B3+3*STEP,B3+4*STEP,PNOTE_POS_X+193,0,...                   //18
        {54} 0,0,0,0,B3+2*STEP,B3+3*STEP,B3+2*STEP,B3+3*STEP,PNOTE_POS_X+197,1,...
        {55} 0,0,0,0,B3+2*STEP,B3+2*STEP,B3+2*STEP,B3+2*STEP,PNOTE_POS_X+205,0,...                   //19
        {56} 0,0,0,0,B3+STEP,B3+2*STEP,B3+STEP,B3+2*STEP,PNOTE_POS_X+208,1,...
        {57} 0,0,0,0,B3+STEP,B3+STEP,B3+STEP,B3+STEP,PNOTE_POS_X+216,0,...                           //20
        {58} 0,0,0,0,B3,B3+STEP,B3,B3+STEP,PNOTE_POS_X+220,1,...
        {59} 0,0,2,0,B3,B3,C4,B3,PNOTE_POS_X+228,0,...                                               //21
        {60} 2,2,2,2,C4,C4,C4,B3,PNOTE_POS_X+239,0,...                                               //22
        {61} 0,2,0,2,C4-STEP,C4,C4-STEP,C4,PNOTE_POS_X+242,1,...
        {62} 0,0,0,0,C4-STEP,C4-STEP,C4-STEP,C4-STEP,PNOTE_POS_X+250,0,...                           //23
        {63} 0,0,0,0,C4-2*STEP,C4-STEP,C4-2*STEP,C4-STEP,PNOTE_POS_X+254,1,...
        {64} 0,0,0,0,C4-2*STEP,C4-2*STEP,C4-3*STEP,C4-2*STEP,PNOTE_POS_X+262,0,...                   //24
        {65} 0,0,0,0,C4-3*STEP,C4-3*STEP,C4-3*STEP,C4-2*STEP,PNOTE_POS_X+273,0,...                   //25
        {66} 0,0,0,0,C4-4*STEP,C4-3*STEP,C4-4*STEP,C4-3*STEP,PNOTE_POS_X+275,1,...
        {67} 0,0,0,0,C4-4*STEP,C4-4*STEP,C4-4*STEP,C4-4*STEP,PNOTE_POS_X+283,0,...                   //26
        {68} 0,0,0,0,C4-5*STEP,C4-4*STEP,C4-5*STEP,C4-4*STEP,PNOTE_POS_X+288,1,...
        {69} 0,0,0,0,C4-5*STEP,C4-5*STEP,C4-5*STEP,C4-5*STEP,PNOTE_POS_X+296,0,...                   //27
        {70} 0,0,0,0,C4-6*STEP,C4-5*STEP,C4-6*STEP,C4-5*STEP,PNOTE_POS_X+299,1,...
        {71} 0,0,0,0,C4-6*STEP,C4-6*STEP,C4-7*STEP,C4-6*STEP,PNOTE_POS_X+307,0,...                   //28
        {72} 0,0,0,0,C4-7*STEP,C4-7*STEP,C4-7*STEP,C4-6*STEP,PNOTE_POS_X+317,0,...                   //29
        {73} 0,0,0,0,C4-8*STEP,C4-7*STEP,C4-8*STEP,C4-7*STEP,PNOTE_POS_X+322,1,...
        {74} 0,0,0,0,C4-8*STEP,C4-8*STEP,C4-8*STEP,C4-8*STEP,PNOTE_POS_X+330,0,...                   //30
        {75} 0,0,0,0,C4-9*STEP,C4-8*STEP,C4-9*STEP,C4-8*STEP,PNOTE_POS_X+334,1,...
        {76} 0,0,0,0,C4-9*STEP,C4-9*STEP,C4-10*STEP,C4-9*STEP,PNOTE_POS_X+342,0,...                  //31
        {77} 0,0,0,0,C4-10*STEP,C4-10*STEP,C4-10*STEP,C4-9*STEP,PNOTE_POS_X+353,0,...                //32
        {78} 0,0,0,0,C4-11*STEP,C4-10*STEP,C4-11*STEP,C4-10*STEP,PNOTE_POS_X+356,1,...
        {79} 0,0,0,0,C4-11*STEP,C4-11*STEP,C4-11*STEP,C4-11*STEP,PNOTE_POS_X+364,0,...               //33
        {80} 2,0,2,0,C4-12*STEP,C4-11*STEP,C4-12*STEP,C4-11*STEP,PNOTE_POS_X+368,1,...
        {81} 2,2,2,2,C4-12*STEP,C4-12*STEP,C4-12*STEP,C4-12*STEP,PNOTE_POS_X+376,0,...               //34
        {82} 3,2,3,2,C4-13*STEP,C4-12*STEP,C4-13*STEP,C4-12*STEP,PNOTE_POS_X+379,1,...
        {83} 3,3,2,3,C4-13*STEP,C4-13*STEP,C4-14*STEP,C4-13*STEP,PNOTE_POS_X+387,0,...               //35
        {84} 2,2,2,2,C4-14*STEP,C4-14*STEP,C4-14*STEP,C4-13*STEP,PNOTE_POS_X+397,0,...               //36
        {85} 3,2,3,2,C4-15*STEP,C4-14*STEP,C4-15*STEP,C4-14*STEP,PNOTE_POS_X+400,1,...
        {86} 3,3,3,3,C4-15*STEP,C4-15*STEP,C4-15*STEP,C4-15*STEP,PNOTE_POS_X+408,0,...               //37
        {87} 2,3,2,3,C4-16*STEP,C4-15*STEP,C4-16*STEP,C4-15*STEP,PNOTE_POS_X+411,1,...
        {88} 2,2,2,2,C4-16*STEP,C4-16*STEP,C4-17*STEP,C4-16*STEP,PNOTE_POS_X+419,0,...               //38
        {89} 3,3,3,2,C4-17*STEP,C4-17*STEP,C4-17*STEP,C4-16*STEP,PNOTE_POS_X+430,0,...               //39
        {90} 2,3,2,3,C4-18*STEP,C4-17*STEP,C4-18*STEP,C4-17*STEP,PNOTE_POS_X+433,1,...
        {91} 2,2,2,2,C4-18*STEP,C4-18*STEP,C4-18*STEP,C4-18*STEP,PNOTE_POS_X+441,0,...               //40
        {92} 3,2,3,2,C4-19*STEP,C4-18*STEP,C4-19*STEP,C4-18*STEP,PNOTE_POS_X+444,1,...
        {93} 3,3,3,3,C4-19*STEP,C4-19*STEP,C4-19*STEP,C4-19*STEP,PNOTE_POS_X+452,0,...               //41
        {94} 2,3,2,3,C4-20*STEP,C4-19*STEP,C4-20*STEP,C4-19*STEP,PNOTE_POS_X+455,1,...
        {95} 2,2,2,2,C4-20*STEP,C4-20*STEP,C4-21*STEP,C4-20*STEP,PNOTE_POS_X+463,0,...               //42
        {96} 3,3,3,2,C4-21*STEP,C4-21*STEP,C4-21*STEP,C4-20*STEP,PNOTE_POS_X+474,0,...               //43
        {97} 2,3,2,3,C4-22*STEP,C4-21*STEP,C4-22*STEP,C4-21*STEP,PNOTE_POS_X+477,1,...
        {98} 2,2,2,2,C4-22*STEP,C4-22*STEP,C4-22*STEP,C4-22*STEP,PNOTE_POS_X+485,0,...               //44
        {99} 3,2,3,2,C4-23*STEP,C4-22*STEP,C4-23*STEP,C4-22*STEP,PNOTE_POS_X+489,1,...
        {100} 3,3,2,3,C4-23*STEP,C4-23*STEP,C4-24*STEP,C4-23*STEP,PNOTE_POS_X+497,0,...              //45
        {101} 2,2,2,2,C4-24*STEP,C4-24*STEP,C4-24*STEP,C4-23*STEP,PNOTE_POS_X+508,0,...              //46
        {102} 3,2,3,2,C4-25*STEP,C4-24*STEP,C4-25*STEP,C4-24*STEP,PNOTE_POS_X+511,1,...
        {103} 3,3,3,3,C4-25*STEP,C4-25*STEP,C4-25*STEP,C4-25*STEP,PNOTE_POS_X+519,0,...              //47
        {104} 2,3,2,3,C4-26*STEP,C4-25*STEP,C4-26*STEP,C4-25*STEP,PNOTE_POS_X+522,1,...
        {105} 2,2,2,2,C4-26*STEP,C4-26*STEP,C4-26*STEP,C4-26*STEP,PNOTE_POS_X+530,0,...              //48
        {106} 3,2,3,2,C4-27*STEP,C4-26*STEP,C4-27*STEP,C4-26*STEP,PNOTE_POS_X+533,1,...
        {107} 3,3,2,3,C4-27*STEP,C4-27*STEP,C4-28*STEP,C4-27*STEP,PNOTE_POS_X+541,0,...              //49
        {108} 2,2,2,2,C4-28*STEP,C4-28*STEP,C4-28*STEP,C4-27*STEP,PNOTE_POS_X+552,0,...              //50
        {109} NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {110} NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {111} NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {112} NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {113} NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {114} NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {115} NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {116} NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {117} NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {118} NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {119} NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {120} NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {121} NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {122} NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {123} NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {124} NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {125} NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {126} NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,...
        {127} NA,NA,NA,NA,NA,NA,NA,NA,NA,NA)

    declare position[AVAILABLE_NUM] := (...
        1,2,3,2,1,2,3,2,1,2,3,2,...
        1,2,3,2,1,2,3,2,1,2,3,2,...
        1,2,3,2,1,2,3,2,1,2,3,2,...
        1,2,3,2,1,2,3,2,1,2,3,2,...
        1,2)

    declare all_chord[NUM_OF_NOTE*NUM_OF_CHORD*NUM_OF_KEY]
    for i := 0 to NUM_OF_NOTE - 1
        for j := 0 to NUM_OF_CHORD - 1
            for k := 0 to NUM_OF_KEY - 1
                declare temp_chord[NUM_OF_KEY] := (0xFF)
                if base_chord[j*NUM_OF_KEY + k] # 0xFF
                    temp_chord[k] := (base_chord[j*NUM_OF_KEY + k] + i) mod NUM_OF_NOTE
                else
                    temp_chord[k] := 0xFF
                end if
                if k = NUM_OF_KEY - 1
                    sort(temp_chord, 0)
                    for l := 0 to NUM_OF_KEY - 1
                        all_chord[i*NUM_OF_CHORD*NUM_OF_KEY + j*NUM_OF_KEY + l] := temp_chord[l]
                    end for
                end if
            end for
        end for
    end for

    pgs_create_key(SUSTAIN_RELEASE, 1)
    pgs_create_key(KEY_PRESSED, 1)
//    SET_CONDITION(NO_SYS_SCRIPT_PEDAL)
    color_key(0)
end on

function remove_all_notes
    for i := 0 to AVAILABLE_NUM - 1
        note[i]->hide := HIDE_PART_BG
        sharp[i]->hide := HIDE_PART_BG
        flat[i]->hide := HIDE_PART_BG
        natural[i]->hide := HIDE_PART_BG
    end for
    for i := 0 to 16 - 1
        line[i]->hide := HIDE_PART_BG
    end for
end function

function remove_all_chord
    set_text(main, "")
    set_text(sub, "")
end function

function get_index_by_key (note) -> result
    select key
        case 0
            if signature[(note mod NUM_OF_NOTE)*NUM_OF_KEYS+key] = 1
                result := 1
            else
                result := 0
            end if
        case 1 to 7
            if signature[(note mod NUM_OF_NOTE)*NUM_OF_KEYS+key] = 4
                result := 2
            else
                result := 0
            end if
        case 8 to 14
            if signature[(note mod NUM_OF_NOTE)*NUM_OF_KEYS+key] = 5
                result := 3
            else
                result := 1
            end if
    end select
end function

function update_notes
    notes := concat(empty_notes)
    pnum := 0
    for i := 0 to NUM_OF_ALL_KEY - 1
        if KEY_DOWN[i] = 1
            notes[pnum] := i
            inc(pnum)
        end if
    end for
end function

function display_notes
    call remove_all_notes
    declare snotes[AVAILABLE_NUM] := (0xFF)
    declare dnotes[AVAILABLE_NUM] := (0xFF)
    declare tnotes[AVAILABLE_NUM*2] := (0xFF)
    if is_sustain = 1
        tnotes := concat(notes, snotes)
        sort(tnotes, 0)
        dnotes := concat(empty_notes)
        for i := 0 to AVAILABLE_NUM - 1
            if search(dnotes, tnotes[i]) = -1 and tnotes[i] # 0xFF
                dnotes[i] := tnotes[i]
            end if
        end for
        sort(dnotes, 0)
    else
        dnotes := concat(notes)
    end if
    snotes := concat(dnotes)

    declare line_pos[4] := (0,-2,5,12)
    declare index := 0
    declare prev_index := 0
    declare current := 0
    declare previous := 0
    j := 0
    n := 0
    for i := 0 to num_elements(dnotes) - 1
        if dnotes[i] # 0xFF
            index := get_index_by_key(dnotes[i])
            current := dnotes[i]*NOTE_INDEX+POS_Y+index
            if i > 0
                prev_index := get_index_by_key(dnotes[i-1])
                previous := dnotes[i-1]*NOTE_INDEX+POS_Y+prev_index
            end if
            select signature[(dnotes[i] mod NUM_OF_NOTE)*NUM_OF_KEYS + key]
                case 1
                    sharp[i]->pos_x := NOTE_POS_X - (position[j] * SIG_POS_X)
                    sharp[i]->pos_y := note_pos[current] - 10
                    sharp[i]->hide := HIDE_PART_NOTHING
                    inc(j)
                case 2
                    flat[i]->pos_x := NOTE_POS_X - (position[j] * SIG_POS_X)
                    flat[i]->pos_y := note_pos[current] - 16
                    flat[i]->hide := HIDE_PART_NOTHING
                    inc(j)
                case 3
                    natural[i]->pos_x := NOTE_POS_X - (position[j] * SIG_POS_X)
                    natural[i]->pos_y := note_pos[current] - 10
                    natural[i]->hide := HIDE_PART_NOTHING
                    inc(j)
            end select
            declare n_search := 0
            if i > 0 and note_pos[previous] = note_pos[current]
                note[i]->pos_x := note[i-1]->pos_x + NOTE_WHOLE_X
            else if i > 0 and note_pos[previous] = note_pos[current] + STEP
                for k := i downto 0
                    if note[k]->pos_y = note_pos[current] + STEP and note[k]->pos_x = NOTE_POS_X
                        n_search := 1
                    end if
                end for
                if n_search = 1
                    note[i]->pos_x := note[i-1]->pos_x + NOTE_HALF_X
                else
                    note[i]->pos_x := NOTE_POS_X
                end if
            else
                note[i]->pos_x := NOTE_POS_X
            end if

            declare pline := note_pos[dnotes[i]*NOTE_INDEX+index]
            if pline # 0
                declare pos := note_pos[current] + line_pos[pline]
                if pos = line_pos_y[9]
                    line[9]->hide := HIDE_PART_NOTHING
                else if line_pos_y[0] <= pos and pos <= line_pos_y[8]
                    for l := 0 to 8
                        if note_pos[current] + line_pos[pline] <= line_pos_y[l]
                            line[l]->hide := HIDE_PART_NOTHING
                        end if
                    end for
                else if line_pos_y[10] <= pos and pos <= line_pos_y[15]
                    for l := 10 to 15
                        if note_pos[current] + line_pos[pline] >= line_pos_y[l]
                            line[l]->hide := HIDE_PART_NOTHING
                        end if
                    end for
                end if
            end if
            note[i]->pos_y := note_pos[current]
            note[i]->hide := HIDE_PART_NOTHING

        end if
    end for
end function

macro declare_chord(#n#)
    family chord#n#
        declare active := 0
        declare bot_chordbase := 0
        declare top_chordbase := 0
        declare bot_keycount := 0
        declare top_keycount := 0
        declare bot_chordindex[NUM_OF_NOTE*2] := (0xFF)
        declare !bot_chordname[NUM_OF_NOTE] := ("")
        declare top_chordindex[NUM_OF_NOTE*2] := (0xFF)
        declare !top_chordname[NUM_OF_NOTE] := ("")
        declare @last_topchord := ""
        declare @last_botchord := ""
        declare bot_chord[NUM_OF_KEY] := (0xFF)
        declare top_chord[NUM_OF_KEY] := (0xFF)
        declare topindex := 0
    end family
end macro

macro make_chord(#n#)
    if #n# = 0
       divide := pnum
    else
       divide := #n# + 2
    end if
    if pnum >= divide
        chord#n#.active := 1
        chord#n#.bot_chordbase := notes[0] mod NUM_OF_NOTE
        chord#n#.top_chordbase := notes[pnum - divide] mod NUM_OF_NOTE
        @chord#n#.last_topchord := ""
        @chord#n#.last_botchord := ""
        for i := 0 to NUM_OF_NOTE*2 - 1
            chord#n#.top_chordindex[i] := 0xFF
            chord#n#.bot_chordindex[i] := 0xFF
        end for
        chord#n#.bot_chord  := concat(empty_keys)
        chord#n#.top_chord := concat(empty_keys)
        chord#n#.topindex := 0
        if pnum - divide <= 7
            n := 0
        else
            n := (pnum - divide) - 7
        end if
        for i := 0 + n to pnum - divide - 1
            if notes[i] # 0xFF and search(chord#n#.bot_chord, notes[i] mod NUM_OF_NOTE) = -1
                chord#n#.bot_chord[i - n] := notes[i] mod NUM_OF_NOTE
            end if
            inc(chord#n#.bot_keycount)
        end for
        for i := pnum - divide to pnum - divide + 7 - 1
            if notes[i] # 0xFF and search(chord#n#.top_chord, notes[i] mod NUM_OF_NOTE) = -1
                chord#n#.top_chord[i-(pnum-divide)] := notes[i] mod NUM_OF_NOTE
            end if
            inc(chord#n#.top_keycount)
        end for
        sort(chord#n#.bot_chord, 0)
        sort(chord#n#.top_chord, 0)
        print(#n# & " create bottom chord : " & chord#n#.bot_chord[0] & " " & chord#n#.bot_chord[1] & " "& chord#n#.bot_chord[2] & " "& chord#n#.bot_chord[3] & " "& chord#n#.bot_chord[4] & " "& chord#n#.bot_chord[5] & " "& chord#n#.bot_chord[6])
        print(#n# & " create top chord : " & chord#n#.top_chord[0] & " " & chord#n#.top_chord[1] & " "& chord#n#.top_chord[2] & " "& chord#n#.top_chord[3] & " "& chord#n#.top_chord[4] & " "& chord#n#.top_chord[5] & " "& chord#n#.top_chord[6])
    end if
end macro

macro search_chord(#n#)
    if chord#n#.active = 1
        if array_equal(chord#n#.bot_chord, ref_chord)
            chord#n#.bot_chordindex[k] := k
            chord#n#.bot_chordindex[k+NUM_OF_NOTE] := j
            if j = 0 and chord#n#.bot_keycount = 1
                !chord#n#.bot_chordname[k] := !ckeynotes[ckey*NUM_OF_NOTE+k]
            else
                if chord#n#.bot_chordbase = k
                    !chord#n#.bot_chordname[k] := !ckeynotes[ckey*NUM_OF_NOTE+k] & " " & !chord_names[j]
                else
                    !chord#n#.bot_chordname[k] := !ckeynotes[ckey*NUM_OF_NOTE+k] & " " & !chord_names[j] & " / " & !ckeynotes[ckey*NUM_OF_NOTE+chord#n#.bot_chordbase]
                end if
            end if
            print(#n# & " found bottom chord : " & !chord#n#.bot_chordname[k] & " - " & chord#n#.bot_chord[0] & " " & chord#n#.bot_chord[1] & " "& chord#n#.bot_chord[2] & " "& chord#n#.bot_chord[3] & " "& chord#n#.bot_chord[4] & " "& chord#n#.bot_chord[5] & " "& chord#n#.bot_chord[6])
        end if
        if array_equal(chord#n#.top_chord, ref_chord)
            chord#n#.top_chordindex[k] := k
            chord#n#.top_chordindex[k+NUM_OF_NOTE] := j

            if j = 0 and chord#n#.top_keycount = 1
                !chord#n#.top_chordname[k] := !ckeynotes[ckey*NUM_OF_NOTE+k]
            else
                if chord#n#.top_chordbase = k or #n# # 0
                    !chord#n#.top_chordname[k] := !ckeynotes[ckey*NUM_OF_NOTE+k] & " " & !chord_names[j]
                else
                    !chord#n#.top_chordname[k] := !ckeynotes[ckey*NUM_OF_NOTE+k] & " " & !chord_names[j] & " / " & !ckeynotes[ckey*NUM_OF_NOTE+chord#n#.top_chordbase]
                end if
            end if
            print(#n# & " found top chord: " & !chord#n#.top_chordname[k] & " - " & chord#n#.top_chord[0] & " " & chord#n#.top_chord[1] & " "& chord#n#.top_chord[2] & " "& chord#n#.top_chord[3] & " "& chord#n#.top_chord[4] & " "& chord#n#.top_chord[5] & " "& chord#n#.top_chord[6])
        end if
    end if
end macro

macro display_chord(#n#)
    if chord#n#.active = 1
        show := 0
        print(#n# & "bottom index (" & chord#n#.bot_chordbase & ") " & "(0)" & chord#n#.bot_chordindex[0] & ",(1)" & chord#n#.bot_chordindex[1] & ",(2)" & chord#n#.bot_chordindex[2] & ",(3)" & chord#n#.bot_chordindex[3] & ",(4)" & chord#n#.bot_chordindex[4] & ",(5)" & chord#n#.bot_chordindex[5] & ",(6)" & chord#n#.bot_chordindex[6] & ",(7)" & chord#n#.bot_chordindex[7] & ",(8)" & chord#n#.bot_chordindex[8] & ",(9)" & chord#n#.bot_chordindex[9] & ",(10)"& chord#n#.bot_chordindex[10] & ",(11)" & chord#n#.bot_chordindex[11])
        print(#n# & "bottom chord (" & chord#n#.bot_chordbase & ") " & "(0)" & !chord#n#.bot_chordname[0] & ",(1)" & !chord#n#.bot_chordname[1] & ",(2)" & !chord#n#.bot_chordname[2] & ",(3)" & !chord#n#.bot_chordname[3] & ",(4)" & !chord#n#.bot_chordname[4] & ",(5)" & !chord#n#.bot_chordname[5] & ",(6)" & !chord#n#.bot_chordname[6] & ",(7)" & !chord#n#.bot_chordname[7] & ",(8)" & !chord#n#.bot_chordname[8] & ",(9)" & !chord#n#.bot_chordname[9] & ",(10)"& !chord#n#.bot_chordname[10] & ",(11)" & !chord#n#.bot_chordname[11])
        print(#n# & "top index1 (" & chord#n#.top_chordbase & ") " & "(0)" & chord#n#.top_chordindex[0] & ",(1)" & chord#n#.top_chordindex[1] & ",(2)" & chord#n#.top_chordindex[2] & ",(3)" & chord#n#.top_chordindex[3] & ",(4)" & chord#n#.top_chordindex[4] & ",(5)" & chord#n#.top_chordindex[5] & ",(6)" & chord#n#.top_chordindex[6] & ",(7)" & chord#n#.top_chordindex[7] & ",(8)" & chord#n#.top_chordindex[8] & ",(9)" & chord#n#.top_chordindex[9] & ",(10)"& chord#n#.top_chordindex[10] & ",(11)" & chord#n#.top_chordindex[11])
        print(#n# & "top index2 (" & chord#n#.top_chordbase & ") " & "(12)" & chord#n#.top_chordindex[12] & ",(13)" & chord#n#.top_chordindex[13] & ",(14)" & chord#n#.top_chordindex[14] & ",(15)" & chord#n#.top_chordindex[15] & ",(16)" & chord#n#.top_chordindex[16] & ",(17)" & chord#n#.top_chordindex[17] & ",(18)" & chord#n#.top_chordindex[18] & ",(19)" & chord#n#.top_chordindex[19] & ",(20)" & chord#n#.top_chordindex[20] & ",(21)" & chord#n#.top_chordindex[21] & ",(22)"& chord#n#.top_chordindex[22] & ",(23)" & chord#n#.top_chordindex[23])
        print(#n# & "top chord (" & chord#n#.top_chordbase & ") " & "(0)" & !chord#n#.top_chordname[0] & ",(1)" & !chord#n#.top_chordname[1] & ",(2)" & !chord#n#.top_chordname[2] & ",(3)" & !chord#n#.top_chordname[3] & ",(4)" & !chord#n#.top_chordname[4] & ",(5)" & !chord#n#.top_chordname[5] & ",(6)" & !chord#n#.top_chordname[6] & ",(7)" & !chord#n#.top_chordname[7] & ",(8)" & !chord#n#.top_chordname[8] & ",(9)" & !chord#n#.top_chordname[9] & ",(10)"& !chord#n#.top_chordname[10] & ",(11)" & !chord#n#.top_chordname[11])

        if chord#n#.top_chordindex[chord#n#.top_chordbase] # 0xFF
            @chord#n#.last_topchord := !chord#n#.top_chordname[chord#n#.top_chordbase]
            chord#n#.topindex := chord#n#.top_chordbase
            show := 1
        else
            break := 0
            for n := 1 to NUM_OF_NOTE
                if chord#n#.top_chordindex[(chord#n#.top_chordbase+n) mod NUM_OF_NOTE] # 0xFF and break = 0
                    chord#n#.topindex := (chord#n#.top_chordbase+n) mod NUM_OF_NOTE
                    @chord#n#.last_topchord := !chord#n#.top_chordname[chord#n#.topindex]
                    break := 1
                    show := 1
                end if
            end for
            if break = 0 and #n# = 0
                @chord#n#.last_topchord := !ckeynotes[ckey*NUM_OF_NOTE+chord#n#.top_chordbase] & NC
                show := 1
            end if
        end if

        if chord#n#.bot_chordindex[chord#n#.bot_chordbase] # 0xFF
            @chord#n#.last_botchord := !chord#n#.bot_chordname[chord#n#.bot_chordbase]
        else
            break := 0
            for n := 1 to NUM_OF_NOTE
                if chord#n#.bot_chordindex[(chord#n#.bot_chordbase+n) mod NUM_OF_NOTE] # 0xFF and break = 0
                    @chord#n#.last_botchord := !chord#n#.bot_chordname[(chord#n#.bot_chordbase+n) mod NUM_OF_NOTE]
                    break := 1
                end if
            end for
            if show = 1 and break = 0
                @chord#n#.last_botchord := !ckeynotes[ckey*NUM_OF_NOTE+chord#n#.bot_chordbase] & NC
            end if
        end if

        print("baselist : " & baselist[0] & " " & baselist[1] & " " & baselist[2] & " " & baselist[3] & " " & baselist[4] & " " & baselist[5] & " "& baselist[6])
        print("chordlist : " & chordlist[0] & " " & chordlist[1] & " " & chordlist[2] & " " & chordlist[3] & " " & chordlist[4] & " " & chordlist[5] & " "& chordlist[6])
        print ("(" & #n# & ") Top: " & @chord#n#.last_topchord & " Bottom: " & @chord#n#.last_botchord)

        if show = 1
            print("===> " & "(" & #n# & ") start check")
            for n := 0 to #n# - 1
                print("->" & chord#n#.top_chordindex[chord#n#.topindex] & " == " & baselist[n] & " , " & chord#n#.top_chordindex[chord#n#.topindex+NUM_OF_NOTE] & " == " & chordlist[n])
                if chord#n#.top_chordindex[chord#n#.topindex] = baselist[n] and chord#n#.top_chordindex[chord#n#.topindex+NUM_OF_NOTE] = chordlist[n]
                    print( "-->" & chord#n#.top_chordindex[chord#n#.topindex] & " == " & baselist[n] & " , " & chord#n#.top_chordindex[chord#n#.topindex+NUM_OF_NOTE] & " == " & chordlist[n])
                    print("already exist")
                    show := 0
                end if
            end for
            if show = 1
                baselist[#n#] := chord#n#.top_chordindex[chord#n#.topindex]
                chordlist[#n#] := chord#n#.top_chordindex[chord#n#.topindex+NUM_OF_NOTE]
                if #n# = 0
                    add_text_line(main, @chord#n#.last_topchord)
                else
                    add_text_line(sub, @chord#n#.last_topchord & " / " & @chord#n#.last_botchord)
                end if
            end if
        end if
    end if
end macro

function display_chord
    call remove_all_chord

    if pnum <= 1
        exit
    end if

    declare break := 0
    declare show := 0
    declare baselist[NUM_OF_KEY] := (0)
    declare chordlist[NUM_OF_KEY] := (0)
    declare divide := 0
    declare ckey := 0

    for i := 0 to NUM_OF_KEY - 1
        baselist[i] := 0xFF
        chordlist[i] := 0xFF
    end for

    select (key)
        case 0
            ckey := 0
        case 1 to 7
            ckey := 1
        case 8 to 14
            ckey := 2
    end select

    iterate_macro(declare_chord) := 0 to 6
    iterate_macro(make_chord) := 0 to 6

    k := notes[0] mod NUM_OF_NOTE
    for i := 0 to NUM_OF_NOTE - 1
        for j := 0 to NUM_OF_CHORD - 1
            declare ref_chord[NUM_OF_KEY]
            for l := 0 to NUM_OF_KEY - 1
                ref_chord[l] := all_chord[k*NUM_OF_CHORD*NUM_OF_KEY+j*NUM_OF_KEY+l]
            end for
            iterate_macro(search_chord) := 0 to 6
        end for
        k := (k + 1) mod NUM_OF_NOTE
        if i = NUM_OF_NOTE - 1
            iterate_macro(display_chord) := 0 to 6
        end if
        print(k & " search chord : " & KSP_TIMER & " - " & NI_CALLBACK_ID)
    end for
end function

function color_key (ks)
    for i := 24 to 108
        set_key_color(i, KEY_COLOR_INACTIVE)
    end for
    for i := 24 to 108
        j := major[(i - key_to_index[ks]) mod NUM_OF_NOTE]
        if j = 1
            set_key_color(i, KEY_COLOR_WARM_YELLOW)
        end if
    end for
end function

on note
    ignore_event(EVENT_ID)
    if get_key_color(EVENT_NOTE) = KEY_COLOR_WARM_YELLOW or get_key_color(EVENT_NOTE) = KEY_COLOR_BLUE
        set_key_color(EVENT_NOTE, KEY_COLOR_BLUE)
    else
        set_key_color(EVENT_NOTE, KEY_COLOR_RED)
    end if
    pgs_set_key_val(KEY_PRESSED, 0, 1)
    call update_notes
    if keyoffset[key*NUM_OF_NOTE+(EVENT_NOTE mod NUM_OF_NOTE)] = 1 and note_pos[EVENT_NOTE*NOTE_INDEX+9] = 0
        bnotes[EVENT_NOTE]->pos_x := note_pos[EVENT_NOTE*NOTE_INDEX+8] - 4
    else
        bnotes[EVENT_NOTE]->pos_x := note_pos[EVENT_NOTE*NOTE_INDEX+8]
    end if
    if note_pos[EVENT_NOTE*NOTE_INDEX+9] = 0
        bnotes[EVENT_NOTE]->pos_y := PNOTE_POS_Y
    else
        bnotes[EVENT_NOTE]->pos_y := PNOTE_POS_Y - 10
    end if
    bnotes[EVENT_NOTE]->text := !keynotes[key*NUM_OF_NOTE+(EVENT_NOTE mod NUM_OF_NOTE)]
    if is_sustain = 1
        sustain_notes[EVENT_NOTE] := 0xFF
    end if
end on

on release
    ignore_event(EVENT_ID)
    if is_sustain = 0
        if get_key_color(EVENT_NOTE) = KEY_COLOR_BLUE
            set_key_color(EVENT_NOTE, KEY_COLOR_WARM_YELLOW)
        else
            set_key_color(EVENT_NOTE, KEY_COLOR_INACTIVE)
        end if
        pgs_set_key_val(KEY_PRESSED, 0, 1)
        call update_notes
        bnotes[EVENT_NOTE]->text := ""
    else
        sustain_notes[EVENT_NOTE] := EVENT_NOTE
    end if
end on

on controller
    if ($CC_NUM = 64)
        if (%CC[64] = 127)
            is_sustain := 1
            set_text(sustain, "Sustain")
            for i := 0 to NUM_OF_ALL_KEY - 1
                sustain_notes[i] := 0xFF
            end for
        else
            is_sustain := 0
            set_text(sustain, "")
            pgs_set_key_val(SUSTAIN_RELEASE,0,1)
            for i := 0 to NUM_OF_ALL_KEY - 1
                if sustain_notes[i] # 0xFF
                    if get_key_color(sustain_notes[i]) = KEY_COLOR_BLUE
                        set_key_color(sustain_notes[i], KEY_COLOR_WARM_YELLOW)
                        sustain_notes[i] := 0xFF
                    else
                        set_key_color(sustain_notes[i], KEY_COLOR_INACTIVE)
                        sustain_notes[i] := 0xFF
                    end if
                    bnotes[i]->text := ""
                end if
            end for
        end if
    end if
end on

on pgs_changed
    if pgs_key_exists(SUSTAIN_RELEASE) and pgs_key_exists(KEY_PRESSED)
        if pgs_get_key_val(SUSTAIN_RELEASE, 0) = 1
            //print("on pgs_changed : SUSTAIN_RELEASE ================== : " & NI_CALLBACK_ID)
            pgs_set_key_val(SUSTAIN_RELEASE, 0, 0)
            call update_notes
            call display_notes
            call display_chord
        else if pgs_get_key_val(KEY_PRESSED, 0) = 1
            //print("on pgs_changed : KEY_PRESSED ================== : " & NI_CALLBACK_ID)
            wait(KEYTIME)
            reset_ksp_timer
            call display_notes
            call display_chord
        end if
    end if
end on

on ui_control(knob)
    key := get_control_par(get_ui_id(knob), CONTROL_PAR_VALUE)
    color_key(key)
    set_knob_label(knob, !keys[key])
    for i := 0 to 14 - 1
        flatkey[i]->hide := HIDE_PART_BG
        sharpkey[i]->hide := HIDE_PART_BG
    end for
    set_text(key_name, !keys[key])
    if key < 8
        for i := 0 to key - 1
            flatkey[i]->hide := HIDE_PART_NOTHING
            flatkey[7+i]->hide := HIDE_PART_NOTHING
        end for
    else
        for i := 0 to 14 - key
            sharpkey[i]->hide := HIDE_PART_NOTHING
            sharpkey[7+i]->hide := HIDE_PART_NOTHING
        end for
    end if
end on
